module sdf/grammar/utils

imports
  org.strategoxt.imp.debuggers.stratego.runtime


strategies
  is-empty-grammar =
    s-enter(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "is-empty-grammar", "12,2,22,8")
    ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "13,6,22,8")
    ; (s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "13,6,13,27")
       ; collect-om(
           s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "13,17,13,26")
           ; ?syntax(_)
         ))
    ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "14,6,22,8")
    ; (s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "14,6,14,23")
       ; map(
           s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "14,10,14,22")
           ; ?syntax(
                <s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "14,19,14,20") ; id>
              )
         ))
    ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "15,6,22,8")
    ; (s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "15,6,15,11") ; concat)
    ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "17,6,22,8")
    ; let prod-of-empty-grammar =
            s-enter(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "prod-of-empty-grammar", "17,10,19,39")
            ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "18,15,19,39")
            ; (s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "18,15,18,39")
               ; ?prod(_, cf(layout()), _)
               <+ s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "19,15,19,39")
                  ; ?prod(_, file-start(), _))
            < s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "prod-of-empty-grammar", "17,10,19,39")
            + s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "prod-of-empty-grammar", "17,10,19,39")
              ; fail
      in
        s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "21,10,21,35")
        ; map(
            s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "21,14,21,34") ; prod-of-empty-grammar
          )
      end
    < s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "is-empty-grammar", "12,2,22,8")
    + s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "is-empty-grammar", "12,2,22,8")
      ; fail

  error-if-empty-grammar(c) =
    s-enter(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "error-if-empty-grammar", "31,2,35,6")
    ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "32,4,35,6")
    ; if s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "32,7,32,22") ; is-empty-grammar then
        s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "33,6,34,8")
        ; (s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "33,6,33,88")
           ; log(|Error(), "No production rules in RTG. Did you specify the right main module?"))
        ; s-step(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "34,8,34,8")
        ; c
      end
    < s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "error-if-empty-grammar", "31,2,35,6")
    + s-exit(|"_cellar/sdf-tools/lib/sdf/grammar/utils.str", "error-if-empty-grammar", "31,2,35,6")
      ; fail