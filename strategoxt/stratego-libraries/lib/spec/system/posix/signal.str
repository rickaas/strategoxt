module system/posix/signal

imports
  org.strategoxt.imp.debuggers.stratego.runtime


signature
  constructors
    Signal        : String * Int * String -> Signal
    UnknownSignal : Int -> Signal


strategies
  signal-from-number =
    s-enter(
    | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
    , "signal-from-number"
    , "17"
    , "2"
    , "19"
    , "24"
    )
    ; s-step(
      | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
      , "17"
      , "23"
      , "19"
      , "24"
      )
    ; (s-step(
       | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
       , "17"
       , "23"
       , "17"
       , "24"
       )
       ; ?i)
    ; s-step(
      | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
      , "18"
      , "6"
      , "19"
      , "23"
      )
    ; (s-step(
       | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
       , "18"
       , "6"
       , "18"
       , "48"
       )
       ; <(s-step(
           | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
           , "18"
           , "7"
           , "18"
           , "34"
           )
           ; fetch-elem(
               s-step(
               | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
               , "18"
               , "18"
               , "18"
               , "33"
               )
               ; ?Signal(_, i, _)
             ))> AllSignals()
       <+ s-step(
          | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
          , "19"
          , "7"
          , "19"
          , "23"
          )
          ; !UnknownSignal(i))
    < s-exit(
      | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
      , "signal-from-number"
      , "17"
      , "2"
      , "19"
      , "24"
      )
    + s-exit(
      | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
      , "signal-from-number"
      , "17"
      , "2"
      , "19"
      , "24"
      )
      ; fail

  number-from-signal :
    Signal(_, i, _) -> <r-exit(
                        | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                        , "number-from-signal"
                        , "22"
                        , "2"
                        , "23"
                        , "23"
                        )> i
    where r-enter(|"strategoxt/stratego-libraries/lib/spec/system/posix/signal.str", "number-from-signal", "22,2,23,23")
          <+ r-exit(
             | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
             , "number-from-signal"
             , "22"
             , "2"
             , "23"
             , "23"
             )
             ; fail

  number-from-signal :
    UnknownSignal(i) -> <r-exit(
                         | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                         , "number-from-signal"
                         , "25"
                         , "2"
                         , "26"
                         , "24"
                         )> i
    where r-enter(|"strategoxt/stratego-libraries/lib/spec/system/posix/signal.str", "number-from-signal", "25,2,26,24")
          <+ r-exit(
             | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
             , "number-from-signal"
             , "25"
             , "2"
             , "26"
             , "24"
             )
             ; fail

  signal-to-descr :
    Signal(n, i, s) -> <r-exit(
                        | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                        , "signal-to-descr"
                        , "29"
                        , "2"
                        , "30"
                        , "77"
                        )> <s-step(
                            | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                            , "30"
                            , "24"
                            , "30"
                            , "37"
                            )
                            ; concat-strings> [ n
                                              , " ("
                                              , <s-step(
                                                 | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                                                 , "30"
                                                 , "51"
                                                 , "30"
                                                 , "63"
                                                 )
                                                 ; int-to-string> i
                                              , "): "
                                              , s
                                              ]
    where r-enter(|"strategoxt/stratego-libraries/lib/spec/system/posix/signal.str", "signal-to-descr", "29,2,30,77")
          <+ r-exit(
             | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
             , "signal-to-descr"
             , "29"
             , "2"
             , "30"
             , "77"
             )
             ; fail

  signal-to-descr :
    UnknownSignal(i) -> <r-exit(
                         | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                         , "signal-to-descr"
                         , "32"
                         , "2"
                         , "33"
                         , "84"
                         )> <s-step(
                             | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                             , "33"
                             , "25"
                             , "33"
                             , "38"
                             )
                             ; concat-strings> [ "Unknown signal ("
                                               , <s-step(
                                                  | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
                                                  , "33"
                                                  , "63"
                                                  , "33"
                                                  , "75"
                                                  )
                                                  ; int-to-string> i
                                               , ")"
                                               ]
    where r-enter(|"strategoxt/stratego-libraries/lib/spec/system/posix/signal.str", "signal-to-descr", "32,2,33,84")
          <+ r-exit(
             | "strategoxt/stratego-libraries/lib/spec/system/posix/signal.str"
             , "signal-to-descr"
             , "32"
             , "2"
             , "33"
             , "84"
             )
             ; fail


overlays
  AllSignals = [ SIGHUP()
               , SIGINT()
               , SIGQUIT()
               , SIGABRT()
               , SIGKILL()
               , SIGALRM()
               , SIGTERM()
               , SIGBUS()
               , SIGCHLD()
               , SIGCONT()
               , SIGFPE()
               , SIGILL()
               , SIGPIPE()
               , SIGSEGV()
               , SIGSTOP()
               , SIGTSTP()
               , SIGTTIN()
               , SIGTTOU()
               , SIGURG()
               , SIGUSR1()
               , SIGUSR2()
               , SIGPOLL()
               , SIGPROF()
               , SIGSYS()
               , SIGTRAP()
               , SIGVTALRM()
               , SIGXCPU()
               , SIGXFSZ()
               ]


overlays
  SIGHUP = Signal("HUP", 1, "Hangup")

  SIGINT = Signal("INT", 2, "Terminal interrupt")

  SIGQUIT = Signal("QUIT", 3, "Terminal quit")

  SIGABRT = Signal("ABRT", 6, "Process abort")

  SIGKILL = Signal("KILL", 9, "Kill")

  SIGALRM = Signal("ALRM", 14, "Alarm Clock")

  SIGTERM = Signal("TERM", 15, "Termination")


overlays
  SIGBUS = Signal("BUS", 7, "Access to an undefined portion of a memory object")

  SIGCHLD = Signal("CHLD", 17, "Child process terminated, stopped, or continued")

  SIGCONT = Signal("CONT", 18, "Continue executing, if stopped")

  SIGFPE = Signal("FPE", 8, "Erroneous arithmetic operation")

  SIGILL = Signal("ILL", 4, "Illegal Instruction")

  SIGPIPE = Signal("PIPE", 13, "Write on a pipe with no one to read it")

  SIGSEGV = Signal("SEGV", 11, "Invalid memory reference")

  SIGSTOP = Signal("STOP", 19, "Stop executing")

  SIGTSTP = Signal("TSTP", 20, "Terminal stop")

  SIGTTIN = Signal("TTIN", 21, "Background process attempting read")

  SIGTTOU = Signal("TTOU", 22, "Background process attempting write")

  SIGURG = Signal("URG", 23, "High bandwidth data is available at a socket")

  SIGUSR1 = Signal("USR1", 10, "User-defined signal 1")

  SIGUSR2 = Signal("USR2", 12, "User-defined signal 2")


overlays
  SIGPOLL = Signal("POLL", 29, "Pollable event")

  SIGPROF = Signal("PROF", 27, "Profiling timer expired")

  SIGSYS = Signal("SYS", 31, "Bad system call")

  SIGTRAP = Signal("TRAP", 5, "Trace/breakpoint trap")

  SIGVTALRM = Signal("VTALRM", 26, "Virtual timer expired")

  SIGXCPU = Signal("XCPU", 24, "CPU time limit exceeded")

  SIGXFSZ = Signal("XFSZ", 25, "File size limit exceeded")