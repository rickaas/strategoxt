module stratego/asfix/implode/constructor

imports
  org.strategoxt.imp.debuggers.stratego.runtime


strategies
  ReplCons(impl) =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplCons", "16,2,23,24")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "17,7,23,24")
    ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "17,7,17,25")
       ; ReplNamedCons(
           s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "17,21,17,24") ; impl
         )
       <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "18,7,23,24")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "18,7,18,26")
             ; ReplAstPattern(
                 s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "18,22,18,25") ; impl
               )
             <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "19,7,23,24")
                ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "19,7,19,23")
                   ; ReplConsNil(
                       s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "19,19,19,22") ; impl
                     )
                   <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "20,7,23,24")
                      ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "20,7,20,24")
                         ; ReplConsNone(
                             s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "20,20,20,23") ; impl
                           )
                         <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "21,7,23,24")
                            ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "21,7,21,23")
                               ; ReplConsIns(
                                   s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "21,19,21,22") ; impl
                                 )
                               <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "22,7,23,24")
                                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "22,7,22,24")
                                     ; ReplConsSome(
                                         s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "22,20,22,23") ; impl
                                       )
                                     <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "23,7,23,24")
                                        ; ReplConsConc(
                                            s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "23,20,23,23") ; impl
                                          )))))))
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplCons", "16,2,23,24")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplCons", "16,2,23,24")
      ; fail


rules

  ReplNamedCons(impl) :
    appl(p, ts){a*} -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplNamedCons", "27,2,30,22")> c#(<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "28,27,28,35")
                                                                                                                                                     ; map(
                                                                                                                                                         s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "28,31,28,34") ; impl
                                                                                                                                                       )> ts){a*}
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplNamedCons", "27,2,30,22")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplNamedCons", "27,2,30,22")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "30,6,30,22")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "30,6,30,17")
             ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "30,7,30,14") ; get-cons)> p) => c
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplNamedCons", "27,2,30,22")
             ; fail

  get-cons :
    prod(_, _, as) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-cons", "32,2,35,26")> x
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-cons", "32,2,35,26")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-cons", "32,2,35,26")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "35,6,35,26")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "35,7,35,22")
              ; oncetd(
                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "35,14,35,21")
                  ; ?cons(x)
                ))> as
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-cons", "32,2,35,26")
             ; fail


rules

  ReplAstPattern(impl) :
    appl(p, ts){a*} -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplAstPattern", "42,2,88,7")> term{c*}
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplAstPattern", "42,2,88,7")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplAstPattern", "42,2,88,7")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "45,6,88,7")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "45,6,45,35")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "45,6,45,24")
                ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "45,7,45,21") ; get-ast-pattern)> p) => pattern)
          ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "46,6,88,7")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "46,6,46,24")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "46,6,46,18")
                ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "46,7,46,15")
                    ; map(
                        s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "46,11,46,14") ; impl
                      ))> ts) => is)
          ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "47,6,88,7")
          ; {|ReplacePlaceholder:
               s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,8,87,10")
               ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,8,48,77")
                  ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,9,48,74")
                      ; map-with-index(
                          s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,24,48,73")
                          ; {s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,26,48,71")
                             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,26,48,32")
                                ; ?(i, t))
                             ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "48,36,48,71")
                             ; rules ( ReplacePlaceholder :
                                         i -> t )}
                        ))> is)
               ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "49,8,87,10")
               ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "49,8,49,15") ; !pattern)
               ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "50,8,87,10")
               ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "50,8,76,9")
                  ; rec rec (
                      s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "51,11,75,12")
                      ; alltd(
                          s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "51,17,75,11")
                          ; {ph, t1, t2, a*, b*, c*:
                              s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "52,13,74,15")
                              ; if s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "52,16,52,29") ; is-placeholder then
                                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "53,15,70,19")
                                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "53,15,53,20")
                                     ; ?_{a*})
                                  ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "54,17,70,19")
                                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "54,17,54,37")
                                     ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "54,17,54,31") ; get-placeholder) => ph)
                                  ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "55,17,70,19")
                                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "55,20,67,80")
                                     ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "55,20,55,37") ; ReplacePlaceholder
                                        <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,20,67,80")
                                           ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,20,60,24")
                                              ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,20,57,38")
                                                 ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,20,57,25") ; "conc")#((s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,28,57,37")
                                                                                                                                                                        ; [ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,29,57,31") ; rec
                                                                                                                                                                          , s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "57,34,57,36") ; rec
                                                                                                                                                                          ])))
                                              ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,22,60,24")
                                              ; if s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,25,58,51")
                                                   ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,25,58,30") ; "conc")#((s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,33,58,50")
                                                                                                                                                                          ; [ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,34,58,40") ; is-list
                                                                                                                                                                            , s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "58,43,58,49") ; is-list
                                                                                                                                                                            ])) then
                                                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "59,24,59,63")
                                                  ; \ "conc"#([xs, ys]) -> <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "59,48,59,51") ; conc> (xs, ys) \
                                                end
                                              <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "62,20,67,80")
                                                 ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "62,20,63,37")
                                                    ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "62,20,62,52")
                                                       ; ?"yield"#([ <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "62,32,62,49") ; ReplacePlaceholder>
                                                                   ]))
                                                    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "63,22,63,37")
                                                    ; asfix-yield-appl
                                                    <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "65,20,67,80")
                                                       ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "65,20,67,69")
                                                          ; log(
                                                            | Error()
                                                            , <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "66,27,66,40") ; concat-strings> [ "Could not replace placeholder <"
                                                                                                                                                                                         , <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "66,79,66,93") ; write-to-string> ph
                                                                                                                                                                                         , "> in pattern "
                                                                                                                                                                                         , <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "67,45,67,59") ; write-to-string> pattern
                                                                                                                                                                                         ]
                                                            ))
                                                       ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "67,73,67,80")
                                                       ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "67,74,67,77") ; exit)> 1))))
                                  ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "68,17,70,19")
                                  ; if s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "68,20,68,32")
                                       ; not(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "68,24,68,31")
                                             ; [] := a*) then
                                      s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "69,19,69,77")
                                      ; \ t1{b*} -> t1{c*}
                                          where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "69,44,69,75")
                                                ; c* := <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "69,51,69,54") ; conc> ( <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "69,59,69,66")
                                                                                                                                                                            ; map(
                                                                                                                                                                                s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "69,63,69,65") ; rec
                                                                                                                                                                              )> a*
                                                                                                                                                                         , b*
                                                                                                                                                                         ) \
                                    end
                                else
                                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "72,15,73,83")
                                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "72,15,72,26")
                                     ; ?_{^[_|_]})
                                  ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,17,73,83")
                                  ; \ t1{a*} -> t2{b*}
                                      where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,42,73,81")
                                            ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,42,73,60")
                                               ; b* := <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,49,73,56")
                                                        ; map(
                                                            s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,53,73,55") ; rec
                                                          )> a*)
                                            ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,63,73,81")
                                            ; t2 := <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "73,70,73,72") ; rec> t1{^[]} \
                                end
                            }
                        )
                    ))
               ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "77,8,87,10")
               ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "77,8,77,16")
                  ; ?term{b*})
               ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "78,8,87,10")
               ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "78,8,86,10")
                  ; if s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "78,11,78,18")
                       ; [] := a* then
                      s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "79,10,79,12")
                      ; !b*
                    else
                      s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "81,10,85,12")
                      ; if s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "81,13,81,20")
                           ; [] := b* then
                          s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "82,12,82,26")
                          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "82,13,82,16") ; conc)> (a*, b*)
                        else
                          s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "84,12,84,14")
                          ; !a*
                        end
                    end)
               ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "87,8,87,10")
               ; ?c*
            |}
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplAstPattern", "42,2,88,7")
             ; fail

  get-ast-pattern :
    prod(_, _, as) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-ast-pattern", "93,2,95,29")> <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "94,23,94,38") ; read-from-string> x
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-ast-pattern", "93,2,95,29")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-ast-pattern", "93,2,95,29")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "95,10,95,29")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "95,11,95,25")
              ; oncetd(
                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "95,18,95,24")
                  ; ?ast(x)
                ))> as
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "get-ast-pattern", "93,2,95,29")
             ; fail


signature
  constructors
    ast : Term -> Term


rules

  ReplConsNil(impl) :
    appl(p, []) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNil", "106,2,109,15")> []
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNil", "106,2,109,15")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNil", "106,2,109,15")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "109,6,109,15")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "109,7,109,12") ; is-nil)> p
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNil", "106,2,109,15")
             ; fail

  ReplConsNone(impl) :
    appl(p, []) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNone", "111,2,114,16")> None()
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNone", "111,2,114,16")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNone", "111,2,114,16")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "114,6,114,16")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "114,7,114,13") ; is-none)> p
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsNone", "111,2,114,16")
             ; fail

  ReplConsIns(impl) :
    appl(p, [t]) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "116,2,119,15")> [ <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "117,22,117,25") ; impl> t
                                                                                                                                              ]
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "116,2,119,15")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "116,2,119,15")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "119,6,119,15")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "119,7,119,12") ; is-ins)> p
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "116,2,119,15")
             ; fail


rules

  ReplConsIns(impl) :
    appl(
      prod([lit(x)], sym, _)
    , []
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "126,2,129,44")> t
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "126,2,129,44")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "126,2,129,44")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "129,6,129,44")
          ; t := <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "129,12,129,39")
                  ; implode-constant-literal(|x)> sym
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "126,2,129,44")
             ; fail

  ReplConsIns(impl) :
    appl(
      prod([cilit(x)], sym, _)
    , []
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "131,2,134,44")> t
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "131,2,134,44")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "131,2,134,44")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "134,6,134,44")
          ; t := <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "134,12,134,39")
                  ; implode-constant-literal(|x)> sym
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsIns", "131,2,134,44")
             ; fail

  implode-constant-literal(|constant) =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "implode-constant-literal", "136,2,147,4")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "137,4,147,4")
    ; rec rec (
        s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "138,6,146,29")
        ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "138,6,138,15")
           ; ?cf(
                <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "138,11,138,13") ; rec>
              )
           + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "139,6,146,29")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "139,6,139,16")
                ; ?lex(
                     <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "139,12,139,14") ; rec>
                   )
                + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "140,6,146,29")
                  ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "140,6,140,30")
                     ; \ iter(
                           <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "140,14,140,16") ; rec>
                         ) -> [<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "140,25,140,26") ; id>] \
                     + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "141,6,146,29")
                       ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "141,6,141,35")
                          ; \ iter-star(
                                <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "141,19,141,21") ; rec>
                              ) -> [<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "141,30,141,31") ; id>] \
                          + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "142,6,146,29")
                            ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "142,6,142,37")
                               ; \ iter-sep(
                                     <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "142,18,142,20") ; rec>
                                   , _
                                   ) -> [<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "142,32,142,33") ; id>] \
                               + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "143,6,146,29")
                                 ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "143,6,143,42")
                                    ; \ iter-star-sep(
                                          <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "143,23,143,25") ; rec>
                                        , _
                                        ) -> [<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "143,37,143,38") ; id>] \
                                    + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "144,6,146,29")
                                      ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "144,6,144,33")
                                         ; \ opt(
                                               <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "144,13,144,15") ; rec>
                                             ) -> Some(
                                                    <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "144,28,144,29") ; id>
                                                  ) \
                                         + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "145,6,146,29")
                                           ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "145,6,145,27")
                                              ; \ lit(_) -> constant \
                                              + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "146,6,146,29")
                                                ; \ cilit(_) -> constant \))))))))
      )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "implode-constant-literal", "136,2,147,4")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "implode-constant-literal", "136,2,147,4")
      ; fail


rules

  ReplConsSome(impl) :
    appl(p, [t]) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsSome", "151,2,154,16")> Some(
                                                                                                                                                 <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "152,26,152,29") ; impl> t
                                                                                                                                               )
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsSome", "151,2,154,16")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsSome", "151,2,154,16")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "154,6,154,16")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "154,7,154,13") ; is-some)> p
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsSome", "151,2,154,16")
             ; fail

  ReplConsConc(impl) :
    appl(p, [t1, t2]) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "156,2,163,38")> t
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "156,2,163,38")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "156,2,163,38")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "159,6,163,38")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "159,6,159,16")
             ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "159,7,159,13") ; is-conc)> p)
          ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "160,8,163,38")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "160,8,160,22")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "160,8,160,15")
                ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "160,9,160,12") ; impl)> t1) => ts1)
          ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "161,8,163,38")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "161,8,161,22")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "161,8,161,15")
                ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "161,9,161,12") ; impl)> t2) => ts2)
          ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,8,163,38")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,9,163,32")
             ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,9,162,44")
                ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,9,162,26")
                   ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,10,162,21")
                       ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,10,162,11") ; []
                          + s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,15,162,21")
                            ; [s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,16,162,17") ; id|s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,19,162,20") ; id]))> ts2)
                ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,29,162,44")
                ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "162,30,162,33") ; conc)> (ts1, ts2)
                <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "163,13,163,32")
                   ; !"Conc"#([ts1, ts2]))) => t
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "156,2,163,38")
             ; fail

  ReplConsConc(impl) :
    appl(p, [t1, t2, t3]) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "169,2,172,16")> <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "170,28,170,31") ; conc> ( <s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "170,35,170,38") ; impl> t1
                                                                                                                                                                                                                                                                           , [<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "170,46,170,49") ; impl> t2|<s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "170,57,170,60") ; impl> t3]
                                                                                                                                                                                                                                                                           )
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "169,2,172,16")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "169,2,172,16")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "172,6,172,16")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "172,7,172,13") ; is-conc)> p
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ReplConsConc", "169,2,172,16")
             ; fail


strategies
  is-nil =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "176,2,176,48")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "176,12,176,48")
    ; ?prod(
         []
       , cf(iter-star-sep(_, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "176,2,176,48")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "176,2,176,48")
      ; fail

  is-nil =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "177,2,177,41")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "177,12,177,41")
    ; ?prod(
         []
       , cf(iter-star(_))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "177,2,177,41")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "177,2,177,41")
      ; fail

  is-nil =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "178,2,178,44")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "178,12,178,44")
    ; ?prod([], iter-star-sep(_, _), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "178,2,178,44")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "178,2,178,44")
      ; fail

  is-nil =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "179,2,179,37")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "179,12,179,37")
    ; ?prod([], iter-star(_), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "179,2,179,37")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-nil", "179,2,179,37")
      ; fail

  is-ins =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "181,2,181,47")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "181,12,181,47")
    ; ?prod(
         [cf(x)]
       , cf(iter-sep(x, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "181,2,181,47")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "181,2,181,47")
      ; fail

  is-ins =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "182,2,182,41")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "182,12,182,41")
    ; ?prod(
         [cf(x)]
       , cf(iter(x))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "182,2,182,41")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "182,2,182,41")
      ; fail

  is-ins =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "183,2,183,39")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "183,12,183,39")
    ; ?prod(
         [x]
       , iter-sep(x, _)
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "183,2,183,39")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "183,2,183,39")
      ; fail

  is-ins =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "184,2,184,33")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "184,12,184,33")
    ; ?prod([x], iter(x), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "184,2,184,33")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-ins", "184,2,184,33")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "186,2,186,43")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "186,12,186,43")
    ; ?prod(
         [_, _, _]
       , cf(iter(_))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "186,2,186,43")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "186,2,186,43")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "187,2,187,42")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "187,12,187,42")
    ; ?prod([_, _], iter(_), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "187,2,187,42")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "187,2,187,42")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "188,2,188,48")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "188,12,188,48")
    ; ?prod(
         [_, _, _]
       , cf(iter-star(_))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "188,2,188,48")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "188,2,188,48")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "189,2,189,47")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "189,12,189,47")
    ; ?prod([_, _, _], iter-star(_), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "189,2,189,47")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "189,2,189,47")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "190,2,190,56")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "190,12,190,56")
    ; ?prod(
         [_, _, _, _, _]
       , cf(iter-sep(_, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "190,2,190,56")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "190,2,190,56")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "191,2,191,52")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "191,12,191,52")
    ; ?prod(
         [_, _, _]
       , iter-sep(_, _)
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "191,2,191,52")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "191,2,191,52")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "192,2,192,61")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "192,12,192,61")
    ; ?prod(
         [_, _, _, _, _]
       , cf(iter-star-sep(_, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "192,2,192,61")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "192,2,192,61")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "193,2,193,61")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "193,12,193,61")
    ; ?prod(
         [_, _, _]
       , cf(iter-star-sep(_, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "193,2,193,61")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "193,2,193,61")
      ; fail

  is-conc =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "198,2,198,52")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "198,12,198,52")
    ; ?prod(
         [_, _]
       , cf(iter-star-sep(_, _))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "198,2,198,52")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-conc", "198,2,198,52")
      ; fail

  is-none =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "200,2,200,35")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "200,12,200,35")
    ; ?prod(
         []
       , cf(opt(_))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "200,2,200,35")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "200,2,200,35")
      ; fail

  is-none =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "201,2,201,31")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "201,12,201,31")
    ; ?prod([], opt(_), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "201,2,201,31")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-none", "201,2,201,31")
      ; fail

  is-some =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "203,2,203,40")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "203,12,203,40")
    ; ?prod(
         [cf(x)]
       , cf(opt(x))
       , _
       )
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "203,2,203,40")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "203,2,203,40")
      ; fail

  is-some =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "204,2,204,32")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "204,12,204,32")
    ; ?prod([x], opt(x), _)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "204,2,204,32")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "is-some", "204,2,204,32")
      ; fail


strategies
  Cns =
    s-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Cns", "208,2,208,27")
    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "208,8,208,27")
    ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "208,8,208,13") ; CnsNil
       <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "208,18,208,27") ; CnsGeneric)
    < s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Cns", "208,2,208,27")
    + s-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Cns", "208,2,208,27")
      ; fail


rules

  CnsNil :
    appl(p, ts) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsNil", "212,2,215,23")> []
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsNil", "212,2,215,23")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsNil", "212,2,215,23")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "215,6,215,23")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "215,6,215,18")
             ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "215,7,215,15") ; ConstrNil)> p) => c
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsNil", "212,2,215,23")
             ; fail

  ConstrNil :
    prod(
      []
    , cf(iter-star-sep(_, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "217,2,217,59")> "Nil"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "217,2,217,59")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "217,2,217,59")
             ; fail

  ConstrNil :
    prod(
      []
    , cf(iter-star(_))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "218,2,218,59")> "Nil"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "218,2,218,59")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "218,2,218,59")
             ; fail

  ConstrNil :
    prod([], iter-star-sep(_, _), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "219,2,219,59")> "Nil"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "219,2,219,59")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "219,2,219,59")
             ; fail

  ConstrNil :
    prod([], iter-star(_), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "220,2,220,59")> "Nil"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "220,2,220,59")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "ConstrNil", "220,2,220,59")
             ; fail

  CnsGeneric :
    appl(p, ts) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsGeneric", "222,2,224,36")> c#(ts)
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsGeneric", "222,2,224,36")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsGeneric", "222,2,224,36")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "224,10,224,36")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "224,10,224,31")
             ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "224,11,224,28")
                 ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "224,11,224,17") ; Constr0
                    <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "224,22,224,28") ; Constr1))> p) => c
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "CnsGeneric", "222,2,224,36")
             ; fail

  Constr0 :
    prod(_, _, as) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr0", "229,2,232,26")> x
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr0", "229,2,232,26")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr0", "229,2,232,26")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "232,6,232,26")
          ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "232,7,232,22")
              ; oncetd(
                  s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "232,14,232,21")
                  ; ?cons(x)
                ))> as
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr0", "229,2,232,26")
             ; fail

  Constr1 :
    prod(
      [cf(x)]
    , cf(iter-sep(x, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "234,2,234,57")> "Ins"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "234,2,234,57")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "234,2,234,57")
             ; fail

  Constr1 :
    prod(
      [cf(x)]
    , cf(iter(x))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "235,2,235,57")> "Ins"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "235,2,235,57")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "235,2,235,57")
             ; fail

  Constr1 :
    prod(
      [x]
    , iter-sep(x, _)
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "236,2,236,57")> "Ins"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "236,2,236,57")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "236,2,236,57")
             ; fail

  Constr1 :
    prod([x], iter(x), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "237,2,237,57")> "Ins"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "237,2,237,57")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "237,2,237,57")
             ; fail

  Constr1 :
    prod(
      [_, _, _, _, _]
    , cf(iter-sep(_, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "239,2,239,58")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "239,2,239,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "239,2,239,58")
             ; fail

  Constr1 :
    prod(
      [_, _, _]
    , cf(iter-sep(_, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "240,2,240,58")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "240,2,240,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "240,2,240,58")
             ; fail

  Constr1 :
    prod(
      [_, _, _]
    , cf(iter(_))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "241,2,241,58")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "241,2,241,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "241,2,241,58")
             ; fail

  Constr1 :
    prod(
      [_, _]
    , cf(iter(_))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "242,2,242,58")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "242,2,242,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "242,2,242,58")
             ; fail

  Constr1 :
    prod(
      [_, _, _]
    , iter-sep(_, _)
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "243,2,243,56")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "243,2,243,56")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "243,2,243,56")
             ; fail

  Constr1 :
    prod([_, _], iter(_), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "244,2,244,58")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "244,2,244,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "244,2,244,58")
             ; fail

  Constr1 :
    prod(
      [_, _, _, _, _]
    , cf(iter-star-sep(_, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "246,2,246,64")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "246,2,246,64")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "246,2,246,64")
             ; fail

  Constr1 :
    prod(
      [_, _, _]
    , cf(iter-star-sep(_, _))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "247,2,247,64")> "Conc"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "247,2,247,64")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "247,2,247,64")
             ; fail

  Constr1 :
    prod(
      []
    , cf(opt(_))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "249,2,249,47")> "None"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "249,2,249,47")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "249,2,249,47")
             ; fail

  Constr1 :
    prod([], opt(_), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "250,2,250,44")> "None"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "250,2,250,44")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "250,2,250,44")
             ; fail

  Constr1 :
    prod(
      [cf(x)]
    , cf(opt(x))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "252,2,252,58")> "Some"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "252,2,252,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "252,2,252,58")
             ; fail

  Constr1 :
    prod([x], opt(x), _) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "253,2,253,58")> "Some"
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "253,2,253,58")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr1", "253,2,253,58")
             ; fail

  Constr23 :
    prod(
      args
    , cf(iter-sep(x, y))
    , _
    ) -> <r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr23", "255,2,257,64")> c
    where r-enter(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr23", "255,2,257,64")
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr23", "255,2,257,64")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,10,257,64")
          ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,10,257,59")
             ; <(s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,12,257,52")
                 ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,12,257,27")
                    ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,12,257,19")
                       ; ?[cf(x)])
                    ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,22,257,27")
                    ; !"Ins"
                    <+ s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,32,257,52")
                       ; (s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,32,257,43")
                          ; ?[_, _, _, _, _])
                       ; s-step(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "257,46,257,52")
                       ; !"Conc"))> args) => c
          <+ r-exit(|"strategoxt/stratego-libraries/sglr/lib/stratego/asfix/implode/constructor.str", "Constr23", "255,2,257,64")
             ; fail