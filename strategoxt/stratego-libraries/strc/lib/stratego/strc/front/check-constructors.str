module check-constructors

imports
  org.strategoxt.imp.debuggers.stratego.runtime


imports
  libstratego-lib
  Stratego-Sugar
  stratego/strc/front/error-reporting


rules

  CheckConstructors :
    Specification(
      [ Signature([Constructors(ods1)])
      , Overlays(ols)
      , Strategies(sdefs)
      ]
    ) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckConstructors", "9,2,25,49")> Specification(
                                                                                                                                            [ Signature([Constructors(ods2)])
                                                                                                                                            , Overlays(ols)
                                                                                                                                            , Strategies(sdefs)
                                                                                                                                            ]
                                                                                                                                          )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckConstructors", "9,2,25,49")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckConstructors", "9,2,25,49")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,10,25,49")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,10,21,62")
             ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,10,21,54")
                ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,11,21,48")
                    ; map(
                        s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,15,21,47")
                        ; try(
                            s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,19,21,46")
                            ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,19,21,27") ; TupleDecl
                               + s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "21,31,21,46") ; QuotedConstrDecl)
                          )
                      ))> ods1) => ods2)
          ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "22,10,25,49")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "22,10,22,38")
             ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "22,11,22,32")
                 ; map(
                     s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "22,15,22,31") ; GenerateCheckRule
                   ))> ods2)
          ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "23,10,25,49")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "23,10,23,37")
             ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "23,11,23,32")
                 ; map(
                     s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "23,15,23,31") ; GenerateCheckRule
                   ))> ols)
          ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "24,10,25,49")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "24,10,24,47")
             ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "24,10,24,41")
                ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "24,11,24,36")
                    ; filter(
                        s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "24,18,24,35") ; check-constructors
                      ))> ols) => [])
          ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "25,10,25,49")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "25,10,25,43")
             ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "25,11,25,36")
                 ; filter(
                     s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "25,18,25,35") ; check-constructors
                   ))> sdefs) => []
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckConstructors", "9,2,25,49")
             ; fail

  QuotedConstrDecl :
    OpDeclQ(s, type) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "27,2,28,47")> OpDecl(
                                                                                                                                                           <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "28,32,28,37") ; escape> s
                                                                                                                                                         , type
                                                                                                                                                         )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "27,2,28,47")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "27,2,28,47")
             ; fail

  QuotedConstrDecl :
    ExtOpDeclQ(s, type) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "30,2,31,53")> ExtOpDecl(
                                                                                                                                                              <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "31,38,31,43") ; escape> s
                                                                                                                                                            , type
                                                                                                                                                            )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "30,2,31,53")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "QuotedConstrDecl", "30,2,31,53")
             ; fail

  TupleDecl :
    OpDeclInj(tp@FunType(args, res)) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "33,2,35,32")> OpDecl("", tp)
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "33,2,35,32")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "33,2,35,32")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "35,10,35,32")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "35,10,35,25")
             ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "35,11,35,19") ; TupleType)> args) => res
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "33,2,35,32")
             ; fail

  TupleDecl :
    ExtOpDeclInj(tp@FunType(args, res)) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "37,2,39,32")> ExtOpDecl("", tp)
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "37,2,39,32")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "37,2,39,32")
             ; fail
    where s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "39,10,39,32")
          ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "39,10,39,25")
             ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "39,11,39,19") ; TupleType)> args) => res
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "37,2,39,32")
             ; fail

  TupleDecl :
    OpDeclInj(
      ConstType(
        Sort(
          "Tuple"
        , [Sort("Nil", [])]
        )
      )
    ) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "41,2,43,58")> OpDecl(
                                                                                                                                     ""
                                                                                                                                   , ConstType(
                                                                                                                                       Sort(
                                                                                                                                         "Tuple"
                                                                                                                                       , [Sort("Nil", [])]
                                                                                                                                       )
                                                                                                                                     )
                                                                                                                                   )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "41,2,43,58")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "41,2,43,58")
             ; fail

  TupleDecl :
    ExtOpDeclInj(
      ConstType(
        Sort(
          "Tuple"
        , [Sort("Nil", [])]
        )
      )
    ) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "45,2,47,61")> ExtOpDecl(
                                                                                                                                     ""
                                                                                                                                   , ConstType(
                                                                                                                                       Sort(
                                                                                                                                         "Tuple"
                                                                                                                                       , [Sort("Nil", [])]
                                                                                                                                       )
                                                                                                                                     )
                                                                                                                                   )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "45,2,47,61")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "45,2,47,61")
             ; fail

  TupleDecl :
    OpDeclInj(
      FunType(
        [ConstType(SortVar(x))]
      , ConstType(SortVar(x))
      )
    ) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "49,2,52,74")> OpDecl(
                                                                                                                                     ""
                                                                                                                                   , FunType(
                                                                                                                                       [ConstType(SortVar(x))]
                                                                                                                                     , ConstType(
                                                                                                                                         Sort(
                                                                                                                                           "Tuple"
                                                                                                                                         , [ Sort(
                                                                                                                                               "Cons"
                                                                                                                                             , [ SortVar(x)
                                                                                                                                               , Sort("Nil", [])
                                                                                                                                               ]
                                                                                                                                             )
                                                                                                                                           ]
                                                                                                                                         )
                                                                                                                                       )
                                                                                                                                     )
                                                                                                                                   )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "49,2,52,74")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "49,2,52,74")
             ; fail

  TupleDecl :
    ExtOpDeclInj(
      FunType(
        [ConstType(SortVar(x))]
      , ConstType(SortVar(x))
      )
    ) -> <r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "54,2,57,76")> ExtOpDecl(
                                                                                                                                     ""
                                                                                                                                   , FunType(
                                                                                                                                       [ConstType(SortVar(x))]
                                                                                                                                     , ConstType(
                                                                                                                                         Sort(
                                                                                                                                           "Tuple"
                                                                                                                                         , [ Sort(
                                                                                                                                               "Cons"
                                                                                                                                             , [ SortVar(x)
                                                                                                                                               , Sort("Nil", [])
                                                                                                                                               ]
                                                                                                                                             )
                                                                                                                                           ]
                                                                                                                                         )
                                                                                                                                       )
                                                                                                                                     )
                                                                                                                                   )
    where r-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "54,2,57,76")
          <+ r-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleDecl", "54,2,57,76")
             ; fail

  TupleType =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleType", "59,2,63,30")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "60,4,63,30")
    ; !ConstType(
         Sort(
           "Tuple"
         , [ <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "61,17,63,26")
              ; foldr(
                  s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "61,23,61,37")
                  ; !Sort("Nil", [])
                , s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "62,10,62,38")
                  ; !Sort(
                       "Cons"
                     , [ <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "62,26,62,28") ; Fst>
                       , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "62,33,62,35") ; Snd>
                       ]
                     )
                , s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "63,10,63,25")
                  ; ?ConstType(
                       <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "63,22,63,23") ; id>
                     )
                )>
           ]
         )
       )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleType", "59,2,63,30")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "TupleType", "59,2,63,30")
      ; fail

  CheckCons =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckCons", "65,2,65,38")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "65,14,65,38")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "65,14,65,26")
       ; Op(
           s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "65,17,65,18") ; id
         , s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "65,20,65,25") ; length
         ))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "65,29,65,38")
    ; CheckConsN
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckCons", "65,2,65,38")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "CheckCons", "65,2,65,38")
      ; fail

  GenerateCheckRule =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "68,2,74,6")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "69,4,74,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "69,5,69,59")
       ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "69,5,69,28")
          ; ?OpDecl(c, ConstType(t))
          <+ s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "69,33,69,59")
             ; ?ExtOpDecl(c, ConstType(t))))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "70,6,74,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "70,6,70,19")
       ; where(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "70,12,70,18")
               ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "70,12,70,13")
                  ; !0) => n))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "71,6,74,6")
    ; rules (
        CheckConsN :
          Op(c, n) -> Op(c, [])
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "68,2,74,6")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "68,2,74,6")
      ; fail

  GenerateCheckRule =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "76,2,81,6")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "77,4,81,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "77,5,77,63")
       ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "77,5,77,30")
          ; ?OpDecl(c, FunType(ts, t))
          <+ s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "77,35,77,63")
             ; ?ExtOpDecl(c, FunType(ts, t))))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "78,6,81,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "78,6,78,28")
       ; where(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "78,12,78,27")
               ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "78,12,78,22")
                  ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "78,13,78,18") ; length)> ts) => n))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "79,6,81,6")
    ; rules (
        CheckConsN :
          Op(c, n) -> Op(c, [])
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "76,2,81,6")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "76,2,81,6")
      ; fail

  GenerateCheckRule =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "86,2,87,36")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "87,4,87,36")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "87,4,87,16")
       ; ?OpDeclInj(_)
       <+ s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "87,21,87,36")
          ; ?ExtOpDeclInj(_))
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "86,2,87,36")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "86,2,87,36")
      ; fail

  GenerateCheckRule =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "89,2,94,6")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "90,4,94,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "90,4,90,21")
       ; ?Overlay(c, xs, t))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "91,6,94,6")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "91,6,91,28")
       ; where(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "91,12,91,27")
               ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "91,12,91,22")
                  ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "91,13,91,18") ; length)> xs) => n))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "92,6,94,6")
    ; rules (
        CheckConsN :
          Op(c, n) -> Op(c, [])
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "89,2,94,6")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "GenerateCheckRule", "89,2,94,6")
      ; fail

  check-constructors =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "114,2,115,34")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "115,4,115,34")
    ; AnnoDef(
        s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "115,12,115,13") ; id
      , s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "115,16,115,33") ; check-constructors
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "114,2,115,34")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "114,2,115,34")
      ; fail

  check-constructors =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "117,2,119,64")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "118,4,119,64")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "118,4,118,26")
       ; ?RDefT(
            f
          , xs
          , ys
          , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "118,23,118,24") ; id>
          ))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "119,6,119,64")
    ; check-constructors'(
      | ( f
        , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "119,32,119,37") ; length> xs
        , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "119,45,119,50") ; length> ys
        )
      , "rule"
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "117,2,119,64")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "117,2,119,64")
      ; fail

  check-constructors =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "121,2,123,70")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "122,4,123,70")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "122,4,122,26")
       ; ?SDefT(
            f
          , xs
          , ys
          , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "122,23,122,24") ; id>
          ))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "123,6,123,70")
    ; check-constructors'(
      | ( f
        , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "123,32,123,37") ; length> xs
        , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "123,45,123,50") ; length> ys
        )
      , "definition"
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "121,2,123,70")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "121,2,123,70")
      ; fail

  check-constructors =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "125,2,127,54")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "126,4,127,54")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "126,4,126,24")
       ; ?Overlay(
            f
          , xs
          , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "126,21,126,22") ; id>
          ))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "127,6,127,54")
    ; check-constructors'(
      | ( f
        , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "127,32,127,37") ; length> xs
        )
      , "overlay"
      )
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "125,2,127,54")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors", "125,2,127,54")
      ; fail

  check-constructors'(|fstr, kindstr) =
    s-enter(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors'", "129,2,147,5")
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "130,4,147,5")
    ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "130,4,133,4")
       ; where(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "131,6,132,79")
               ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "131,6,131,21")
                  ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "131,6,131,10") ; !fstr) => (n, i, j))
               ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "132,6,132,79")
               ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "132,6,132,70")
                  ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "132,7,132,20") ; concat-strings)> [ n
                                                                                                                                                      , "("
                                                                                                                                                      , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "132,30,132,42") ; int-to-string> i
                                                                                                                                                      , "|"
                                                                                                                                                      , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "132,51,132,63") ; int-to-string> j
                                                                                                                                                      , ")"
                                                                                                                                                      ]) => fstr'))
    ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "134,4,147,5")
    ; {|CheckConsError:
         s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "135,7,146,64")
         ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "135,7,145,7")
            ; rules (
                CheckConsError :
                  Op(c, ts) -> Op(c, ts)
                  where s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "139,13,144,29")
                        ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "139,13,140,88")
                           ; log(
                             | Error()
                             , [ "in "
                               , kindstr
                               , " "
                               , fstr'
                               , ": "
                               , "constructor "
                               , c
                               , "/"
                               , <s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "140,45,140,65")
                                  ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "140,45,140,50") ; length)
                                  ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "140,53,140,65")
                                  ; int-to-string> ts
                               , " not declared"
                               ]
                             ))
                        ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "141,15,144,29")
                        ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "141,15,141,31")
                           ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "141,16,141,23") ; log-puts)> "    ")
                        ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "142,15,144,29")
                        ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "142,15,142,46")
                           ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "142,16,142,35") ; pp-stratego-fragment)> Op(c, ts))
                        ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "143,15,144,29")
                        ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "143,15,143,22") ; log-puts)
                        ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "144,15,144,29")
                        ; <(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "144,16,144,23") ; log-puts)> "\n"
              ))
         ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "146,7,146,64")
         ; manytd(
             s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "146,14,146,63")
             ; (s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "146,14,146,47")
                ; not(s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "146,18,146,26") ; CheckCons))
             ; s-step(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "146,50,146,63")
             ; CheckConsError
           )
      |}
    < s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors'", "129,2,147,5")
    + s-exit(|"strategoxt/stratego-libraries/strc/lib/stratego/strc/front/check-constructors.str", "check-constructors'", "129,2,147,5")
      ; fail